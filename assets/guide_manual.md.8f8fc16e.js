import{o as a,c as e,a as n,b as s,d as o}from"./app.5c09fb0d.js";const t='{"title":"从零开始","description":"","frontmatter":{},"headers":[{"level":2,"title":"下载运行包","slug":"下载运行包"},{"level":2,"title":"准备环境","slug":"准备环境"},{"level":3,"title":"认识宝塔","slug":"认识宝塔"},{"level":3,"title":"登录面板","slug":"登录面板"},{"level":3,"title":"更换端口","slug":"更换端口"},{"level":3,"title":"管理员权限","slug":"管理员权限"},{"level":2,"title":"部署机器人","slug":"部署机器人"},{"level":3,"title":"上传运行包","slug":"上传运行包"},{"level":3,"title":"申请 token","slug":"申请-token"},{"level":3,"title":"运行机器人","slug":"运行机器人"},{"level":3,"title":"中断程序","slug":"中断程序"},{"level":3,"title":"清理后台程序","slug":"清理后台程序"},{"level":2,"title":"进阶知识","slug":"进阶知识"},{"level":3,"title":"关于 token","slug":"关于-token"},{"level":3,"title":"进程查看","slug":"进程查看"},{"level":3,"title":"日志查看","slug":"日志查看"},{"level":3,"title":"防火墙","slug":"防火墙"},{"level":3,"title":"宝塔面板配置","slug":"宝塔面板配置"},{"level":2,"title":"最佳实践","slug":"最佳实践"},{"level":3,"title":"tmux 管理进程","slug":"tmux-管理进程"},{"level":3,"title":"使用 docker","slug":"使用-docker"},{"level":2,"title":"常见问题","slug":"常见问题"},{"level":3,"title":"启动失败","slug":"启动失败"},{"level":3,"title":"从旧版本升级","slug":"从旧版本升级"}],"relativePath":"guide/manual.md","lastUpdated":1623960202608}',r={},p=s('<h1 id="从零开始"><a class="header-anchor" href="#从零开始" aria-hidden="true">#</a> 从零开始</h1><h2 id="下载运行包"><a class="header-anchor" href="#下载运行包" aria-hidden="true">#</a> 下载运行包</h2><p>你可以从 <a href="https://github.com/opq-osc/OPQ" target="_blank" rel="noopener noreferrer">OPQ</a> 官方项目等渠道获取下载安装包，这里建议使用 amd64 在 ubuntu 上运行（或者 centos ）。</p><p>附：</p><ul><li><p>最新版 opq 运行包（不一定实时更新）：<a href="https://files.gitter.im/5f27939ed73408ce4feb3112/zMQB/OPQBot_6.0.18_linux_amd64.tar.gz" target="_blank" rel="noopener noreferrer">OPQBot_6.0.18_linux_amd64.tar.gz</a></p></li><li><p>jsdelivr 加速镜像仓库 <a href="https://github.com/xiyaowong/iotbot--mirror" target="_blank" rel="noopener noreferrer">xiyaowong / iotbot--mirror</a>，会使用 jsdelivr 的可以在此处加速下载</p></li><li><p>树莓派版本请自行寻找</p></li></ul><h2 id="准备环境"><a class="header-anchor" href="#准备环境" aria-hidden="true">#</a> 准备环境</h2><p>假如你是 linux 小白没关系，按照如下教程一步步操作，让你成为 linux 大手（</p><p>假如你是 linux 老鸟，请直接从 <a href="#%E9%83%A8%E7%BD%B2%E6%9C%BA%E5%99%A8%E4%BA%BA">部署机器人</a> 开始食用。</p><h3 id="认识宝塔"><a class="header-anchor" href="#认识宝塔" aria-hidden="true">#</a> 认识宝塔</h3><p>为了让小白也能轻松操作 linux，我们安装可视化的 linux 宝塔管理面板。</p><p>宝塔 linux 管理面板：<a href="https://www.bt.cn/" target="_blank" rel="noopener noreferrer">官方网站</a></p><p>你可以在 官网 &gt; 立即安装 &gt; Ubuntu/Deepin安装命令 找到：</p>',12),l=s('<p>注：如图片不显示请开启代理。</p><div class="language-bash"><pre><code><span class="token function">wget</span> -O install.sh http://download.bt.cn/install/install-ubuntu_6.0.sh <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> <span class="token function">bash</span> install.sh\n</code></pre></div><p>注：不保证本指令实时更新，请以官网安装指令为准。</p><h3 id="登录面板"><a class="header-anchor" href="#登录面板" aria-hidden="true">#</a> 登录面板</h3><p>面板安装完成后，会显示登录地址，以及登录用户和密码，请参照进行登录，如果访问不了，请放通服务器的安全组。</p><h4 id="安全组"><a class="header-anchor" href="#安全组" aria-hidden="true">#</a> 安全组</h4><p>在服务器提供商管理后台进行放通，假如你是用的是阿里云，那就应该在阿里云的官网管理实例那边设置安全组。</p><p>安全组如果不会配置的，请自行百度，小白不是很懂的话放通所有端口即可。</p><h3 id="更换端口"><a class="header-anchor" href="#更换端口" aria-hidden="true">#</a> 更换端口</h3><p>由于我们机器人默认运行在 <code>8888</code> 端口，而宝塔也是，所以需要更换宝塔面板端口，在<strong>面板设置</strong>内即可更换。</p><h3 id="管理员权限"><a class="header-anchor" href="#管理员权限" aria-hidden="true">#</a> 管理员权限</h3><p>在 ubuntu 上请切换至 root 管理员后再使用命令行，防止权限不够导致不必要的报错，请时刻保持你的 root 管理员权限。</p><div class="language-bash"><pre><code>    <span class="token comment"># 切换至 root 用户</span>\n    <span class="token function">sudo</span> -i\n</code></pre></div><p>注：如果因为各种原因切换失败，请自行百度寻找其他切换至 root 的方法。</p><h2 id="部署机器人"><a class="header-anchor" href="#部署机器人" aria-hidden="true">#</a> 部署机器人</h2><p>现在的你应该能轻松应对 linux 了，下面开始轻松部署机器人</p><h3 id="上传运行包"><a class="header-anchor" href="#上传运行包" aria-hidden="true">#</a> 上传运行包</h3><p>上传之前，你要先去下载好对应你平台型号的 OPQBot 运行包，是一个压缩文件。</p><h4 id="创建文件夹"><a class="header-anchor" href="#创建文件夹" aria-hidden="true">#</a> 创建文件夹</h4><p>如果你是使用的宝塔面板，可以通过 宝塔面板 &gt; 文件 上传刚刚下载的运行包到服务器，这里假设上传到 <code>/root/opqqq</code> 这个文件夹内：</p>',20),c=n("p",null,"如果你是老鸟，请随意放在自己喜欢的地方。",-1),d=n("h4",{id:"使用上传功能"},[n("a",{class:"header-anchor",href:"#使用上传功能","aria-hidden":"true"},"#"),o(" 使用上传功能")],-1),i=n("br",null,null,-1),h=s('<p>都是可视化面板，自行上传即可，上传完毕后右键解压。</p><h3 id="申请-token"><a class="header-anchor" href="#申请-token" aria-hidden="true">#</a> 申请 token</h3><p>机器人运行需要一个唯一 token，在 <a href="https://developer.gitter.im/docs/welcome" target="_blank" rel="noopener noreferrer">gitter.im</a> 内申请一个即可，可以通过：</p><ol><li>github 账号</li><li>twitter 账号</li></ol><p>两种常用方式登录，不需要其他条件，有账号即可申请，如果 github 或者 twitter 的账号你都没有，请自行注册一个。</p><p>登录后就可以看到自己的 token 了：</p>',6),u=n("br",null,null,-1),g=n("br",null,null,-1),k=n("h4",{id:"配置-token"},[n("a",{class:"header-anchor",href:"#配置-token","aria-hidden":"true"},"#"),o(" 配置 token")],-1),f=n("p",null,[o("返回管理面板，在解压好的文件夹内有一个 "),n("code",null,"CoreConf.conf"),o(" 配置文件，打开填写自己的 token ：")],-1),_=s('<p><strong>CoreConf.conf</strong></p><div class="language-json"><pre><code><span class="token comment">// 这里是你的机器人运行端口号，可以自行更改</span>\nPort = <span class="token string">&quot;0.0.0.0:8888&quot;</span>\nWorkerThread = <span class="token number">50</span>\nOPQVer = <span class="token string">&quot;v6.0.16&quot;</span>\nToken = <span class="token string">&quot;...&quot;</span>\n</code></pre></div><p>填写完毕后保存关闭。</p><h3 id="运行机器人"><a class="header-anchor" href="#运行机器人" aria-hidden="true">#</a> 运行机器人</h3><p>使用命令行切换到该目录内：</p><div class="language-bash"><pre><code>    <span class="token builtin class-name">cd</span> ~/opqqq/OPQBot_3.0.8_linux_amd64\n</code></pre></div><p>注：后半部分请根据你解压后的文件名切换，这只是一个例子。</p><h4 id="试运行"><a class="header-anchor" href="#试运行" aria-hidden="true">#</a> 试运行</h4><p>运行机器人：</p><div class="language-bash"><pre><code>    ./OPQBot\n</code></pre></div><p>看到 everything ok 即可进行登录。</p><p>访问：<code>http://host:port/v1/Login/GetQRcode</code> 进行扫码登录，其中 <code>host</code> 是你服务器的 ip ， <code>port</code> 是你在 <code>CoreConf.conf</code> 配置的端口，如果你没有修改，这里默认是 <code>8888</code>。</p><p>查看机器人状态：通过访问 <code>http://host:port/v1/ClusterInfo</code> 查看和刚刚启动的控制台提示确认机器人已经成功登录。</p><p>如果没登录上，请稍等片刻控制台不在提示登录尝试信息后再扫码登录一次。</p><h4 id="正式运行"><a class="header-anchor" href="#正式运行" aria-hidden="true">#</a> 正式运行</h4><p>确认无误后，你可以通过 <code>nohup</code> 后台方式运行机器人：</p><div class="language-bash"><pre><code>    <span class="token function">nohup</span> ./OPQBot <span class="token operator">&amp;</span>\n</code></pre></div><p>会在当前程序目录自动产生一个 <code>nohup.out</code> 日志文件，有关日志查看，请看后文介绍。</p><h3 id="中断程序"><a class="header-anchor" href="#中断程序" aria-hidden="true">#</a> 中断程序</h3><p>如何中断正在运行的机器人进程？可以使用 <code>ctrl+c</code> 中断当前进程。</p><h3 id="清理后台程序"><a class="header-anchor" href="#清理后台程序" aria-hidden="true">#</a> 清理后台程序</h3><p>当程序使用 <code>nohup</code> 运行在后台时，可以采用如下命令杀掉该进程：</p><div class="language-bash"><pre><code>    <span class="token comment"># 找到进程 pid （大小写敏感）</span>\n    <span class="token comment"># 例：找到 OPQBot 进程  ps aux | grep OPQ</span>\n    <span class="token function">ps</span> aux <span class="token operator">|</span> <span class="token function">grep</span> 命令关键词\n    <span class="token comment"># 根据 pid 杀掉进程，上一步找到的进程第一个数字即为 pid</span>\n    <span class="token function">kill</span> pid\n</code></pre></div><h2 id="进阶知识"><a class="header-anchor" href="#进阶知识" aria-hidden="true">#</a> 进阶知识</h2><h3 id="关于-token"><a class="header-anchor" href="#关于-token" aria-hidden="true">#</a> 关于 token</h3><br><h4 id="自动登录"><a class="header-anchor" href="#自动登录" aria-hidden="true">#</a> 自动登录</h4><p>一个 token 绑定一个账号，一旦第一次扫码登录了，第二次启动程序就会自动登录，不需要再扫码了。</p><h4 id="使用其他账号"><a class="header-anchor" href="#使用其他账号" aria-hidden="true">#</a> 使用其他账号</h4><p>如果要使用其他账号，请再去申请一个新 token ，用一份从压缩包（指最初下载的运行包）解压出来新的文件夹再进行配置，因为使用过的文件夹会被污染。</p><h4 id="取消自动登录"><a class="header-anchor" href="#取消自动登录" aria-hidden="true">#</a> 取消自动登录</h4><p>如果你要放弃使用，请在 手机端 QQ &gt; 设备管理 取消机器人设备，这样就不会再自动登陆了。</p><h3 id="进程查看"><a class="header-anchor" href="#进程查看" aria-hidden="true">#</a> 进程查看</h3><p>我们在上文提到了使用 <code>nohup</code> 进行后台运行，我们可以使用 <code>htop</code> 查看进程运行情况：</p><div class="language-bash"><pre><code>    <span class="token function">htop</span>\n</code></pre></div><p>之后就可以查看到该进程的资源占用情况了，按 F10 退出。</p><p>注：如果是 centos ，可能没有安装 htop ，如果需要使用，请自行安装。</p><h3 id="日志查看"><a class="header-anchor" href="#日志查看" aria-hidden="true">#</a> 日志查看</h3><p>我们在上文提到了使用 <code>nohup</code> 进行后台运行，我们可以用如下方式查看我们的日志。</p><h4 id="宝塔控制面板查看"><a class="header-anchor" href="#宝塔控制面板查看" aria-hidden="true">#</a> 宝塔控制面板查看</h4><p>直接在宝塔内点击查看文件即可，但是宝塔不支持查看大文件，超过 3 M 后即不支持打开。</p><h4 id="tail-查看"><a class="header-anchor" href="#tail-查看" aria-hidden="true">#</a> tail 查看</h4><p>使用 <code>tail</code> 命令查看实时日志：</p><div class="language-bash"><pre><code>    <span class="token function">tail</span> -f nohup.out\n</code></pre></div><p>查看最后 10 行日志：</p><div class="language-bash"><pre><code>    <span class="token function">tail</span> nohup.out\n</code></pre></div><h4 id="cat-查看"><a class="header-anchor" href="#cat-查看" aria-hidden="true">#</a> cat 查看</h4><p>使用 <code>cat</code> 命令查看全部日志：</p><div class="language-bash"><pre><code>    <span class="token function">cat</span> nohup.out\n</code></pre></div><p>注意太多可能会控制台爆炸，不建议使用。</p><h4 id="日志定位"><a class="header-anchor" href="#日志定位" aria-hidden="true">#</a> 日志定位</h4><p>先找到这条消息的行数：</p><div class="language-bash"><pre><code>    <span class="token function">tail</span> -n <span class="token number">1000</span> nohup.out <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">&quot;关键词&quot;</span>\n</code></pre></div><p>通过 <code>tail</code> 展示文件最后 1000 行，并通过 <code>grep</code> 搜索含 <code>关键词</code> 的日志，这里的 <code>关键词</code> 可以是任意内容，比如用户名，账号，群组名，消息关键词等。<code>-n</code> 表示显示行号。</p><p>再找到该行之后的消息，假设该消息在 11141 行：</p><div class="language-bash"><pre><code>    <span class="token function">cat</span> -n nohup.out <span class="token operator">|</span> <span class="token function">tail</span> -n +11141 <span class="token operator">|</span> <span class="token function">head</span> -n <span class="token number">30</span>\n</code></pre></div><p>用 <code>cat</code> 取全部日志，再使用 <code>tail</code> 查看 1234 行后的所有日志，再用 <code>head</code> 命令取 1234 行后的前 30 行：</p>',57),v=s('<p>如此一来，就发现了错误位置。</p><h3 id="防火墙"><a class="header-anchor" href="#防火墙" aria-hidden="true">#</a> 防火墙</h3><p>我们部署在服务器上的机器人，如果其他人知道你服务器的 ip 是很危险的，他可以通过相应的网址查看到你的控制台和机器人信息，如果需要，可以在 宝塔面板 &gt; 安全 内关闭机器人部署的端口（默认是 <code>8888</code>）。</p><h3 id="宝塔面板配置"><a class="header-anchor" href="#宝塔面板配置" aria-hidden="true">#</a> 宝塔面板配置</h3><p>可视化面板很简单，请自行探索和百度，密码忘了请使用 shell 工具链接服务器后执行 <code>bt</code> 命令修改：</p><div class="language-bash"><pre><code>    bt\n</code></pre></div><h2 id="最佳实践"><a class="header-anchor" href="#最佳实践" aria-hidden="true">#</a> 最佳实践</h2><h3 id="tmux-管理进程"><a class="header-anchor" href="#tmux-管理进程" aria-hidden="true">#</a> tmux 管理进程</h3><p>使用 <code>nohup</code> 不太容易管理和排查问题，我们可以使用 <code>tmux</code> 进行多窗口隔离管理，就像 windows 一样，将机器人单独跑在一个隔离窗口内可以随时关注运行状态。</p><p>现在你已经是一个熟练的 linux 使用者了，请自行百度学习。</p><p>推荐：<a href="http://www.ruanyifeng.com/blog/2019/10/tmux.html" target="_blank" rel="noopener noreferrer">阮一峰 Tmux 使用教程</a></p><h3 id="使用-docker"><a class="header-anchor" href="#使用-docker" aria-hidden="true">#</a> 使用 docker</h3><br><h4 id="基础镜像"><a class="header-anchor" href="#基础镜像" aria-hidden="true">#</a> 基础镜像</h4><p>在使用之前先构建一个基础镜像环境 <code>Dockerfile</code> ：</p><div class="language-yml"><pre><code>    FROM ubuntu\n\n    RUN apt<span class="token punctuation">-</span>get update <span class="token important">&amp;&amp;</span> apt<span class="token punctuation">-</span>get install <span class="token punctuation">-</span>y wget\n</code></pre></div><p>构建：</p><div class="language-bash"><pre><code>    docker build --no-cache -t opqqq:base <span class="token builtin class-name">.</span>\n</code></pre></div><h4 id="运行"><a class="header-anchor" href="#运行" aria-hidden="true">#</a> 运行</h4><p>将你本地机器人目录挂载到容器里即可：</p><div class="language-bash"><pre><code>    docker run <span class="token punctuation">\\</span>\n        -v /opqqq/OPQBot_3.0.8_linux_amd64:/opq <span class="token punctuation">\\</span>\n        --name opqqq <span class="token punctuation">\\</span>\n        -w /opq <span class="token punctuation">\\</span>\n        -p <span class="token number">8888</span>:8888 <span class="token punctuation">\\</span>\n        -d opqqq:base <span class="token punctuation">\\</span>\n        ./OPQBot\n</code></pre></div><h4 id="内存监控"><a class="header-anchor" href="#内存监控" aria-hidden="true">#</a> 内存监控</h4><div class="language-bash"><pre><code>    <span class="token comment"># 找到 pid</span>\n    <span class="token function">ps</span> aux <span class="token operator">|</span> <span class="token function">grep</span> OPQBot\n    <span class="token comment"># 监控</span>\n    <span class="token function">top</span> -d <span class="token number">2</span> -p <span class="token operator">&lt;</span>pid<span class="token operator">&gt;</span>\n</code></pre></div><h4 id="日志监控"><a class="header-anchor" href="#日志监控" aria-hidden="true">#</a> 日志监控</h4><div class="language-bash"><pre><code>    docker logs -tf opqqq --tail <span class="token number">20</span>\n</code></pre></div><h2 id="常见问题"><a class="header-anchor" href="#常见问题" aria-hidden="true">#</a> 常见问题</h2><h3 id="启动失败"><a class="header-anchor" href="#启动失败" aria-hidden="true">#</a> 启动失败</h3><p>如果你没有安装 wget，可能第一次运行下载资源失败。</p><div class="language-bash"><pre><code>    <span class="token function">apt-get</span> update  \n    <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token function">wget</span>  \n</code></pre></div><h3 id="从旧版本升级"><a class="header-anchor" href="#从旧版本升级" aria-hidden="true">#</a> 从旧版本升级</h3><p>关掉运行的机器人进程或停止 docker 容器，替换 <code>OPQBot</code> 二进制文件即可，请注意替换后文件和文件夹的权限，请设定为 777 ，否则会出现部分功能不能使用的情况。</p><p>宝塔面板可视化设定或执行命令：</p><div class="language-bash"><pre><code>    <span class="token function">chmod</span> -R <span class="token number">777</span> /dir_name\n</code></pre></div>',33);r.render=function(s,o,t,r,m,b){return a(),e("div",null,[p,n("img",{src:s.$withBase("/manual/install.jpg")},null,8,["src"]),l,n("img",{src:s.$withBase("/manual/makedir.jpg")},null,8,["src"]),c,d,i,n("img",{src:s.$withBase("/manual/upload.jpg")},null,8,["src"]),h,n("img",{src:s.$withBase("/manual/token.jpg")},null,8,["src"]),u,g,k,f,n("img",{src:s.$withBase("/manual/input-token.jpg")},null,8,["src"]),_,n("img",{src:s.$withBase("/manual/error.jpg")},null,8,["src"]),v])};export default r;export{t as __pageData};
